;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-advanced-reader.ss" "lang")((modname |ProyectoScheme (2)|) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #t #t none #f () #f)))
(define (gotoL stat x)
  (cond ((zero? x) (car stat))
        (else (gotoL (cdr stat) (- x 1)))))
(define (gotoM stat x y)
  (cond ((zero? y)(gotoL (car stat) x))
        (else (gotoM (cdr stat) x (- y 1) ))))
;(gotoM '((1 2 3 4 5)(11 22 33 44 55)(111 222 333 444 555)(1111 2222 3333 4444 5555)) 0 3)


(define (win? status col row plyr);status is the current status of the game, and size the size of the matrix
  (cond ((winCol status col row 1 plyr) #t)
        ((winRow status col row 0 plyr) #t)
        ((leftColumnWin status col row 1 0 plyr) #t)
        ((upRowWin status col row 1 0 plyr) #t)
        ((rightColumnWin status col row  plyr)#t)
        ((lowRowWin status col row plyr) #t)
        (else #f)))

(define (winCol stat col row currCol plyr);Handles the execution of the winCol_aux
  (cond ((< col currCol) #f)
        ((winCol_aux stat currCol row plyr) #t)
        (else (winCol stat col row (+ currCol 1) plyr))))
(define (winCol_aux stat col row plyr);Determines if there is a winning Column,ply is player, row is the total # of rows
  (cond ((zero? row) #t)
        ((= plyr (gotoM stat col row))(winCol_aux stat col (- row 1) plyr))
        (else #f)))
;(winCol '((1 0 0 0) (1 0 0 0) (1 0 0 0) (1 0 0 0)) 1 3 1)
(define (winRow stat col row curRow plyr)
  (cond ((< row curRow) #f)
        ((winRow_aux stat col curRow plyr) #t)
        (else (winRow stat col row (+ curRow 1) plyr))))
(define (winRow_aux stat col row plyr);Determines if there is a winning Row, column is the total # of columns, row is the current row
  (cond ((zero? col) #t)
        ((= plyr (gotoM stat col row))(winRow_aux stat (- col 1) row plyr))
        (else #f)))
;(winRow '((1 1 1 1) (0 0 0 0) (0 0 0 0) (0 0 0 0)) 1 3 1)
(define (leftColumnWin stat col row x y ply)
  (cond ((< (- row 2) y) #f)
        ((slantedL-Bwin col row x y ply) #t)
        (else (leftColumnWin stat col row x (+ y 1) ply))))
(define (upRowWin stat col row x y ply)
  (cond ((< (- col 2) x) #f)
        ((slantedL-Bwin stat col row x y ply) #t)
        (else (upRowWin stat col row (+ x 1) y ))))
(define (slantedL-Bwin stat col row x y ply);Determines if here is a slanted left to Bottom win, col is total # of solumns and row total # of rows
  ;x and y are parameters for recursivity, should recieve total col - 2 on y and x 0
  (cond ((or (= col x) (= row y)) #t)
        ((= ply (gotoM stat x y)) (slantedL-Bwin stat col row (+ x 1)(+ y 1)))
        (else #f)))
(define (rightColumnWin stat x y ply)
  (cond ((> 2 y) #f)
        ((slantedL-Uwin stat x y ply) #t)
        (else (rightColumnWin stat x (- y 1) ply))))
(define (lowRowWin stat x y ply)
  (cond ((> 3 x) #f)
        ((slantedL-Uwin x y ply) #t)
        (else (lowRowWin stat (- x 1) y ply))))
(define (slantedL-Uwin stat x y ply);Determines if here is a slanted right to Upward win,
  (cond ((or (= 1 x) (zero? y)) #t)
        ((= ply (gotoM stat x y)) (slantedL-Bwin stat (- x 1)(- y 1)))
        (else #f)))

;(goto '((1 2 3 4 5)(11 22 33 44 55)(111 222 333 444 555)(1111 2222 3333 4444 5555)))
(define (showgame_aux stat col row x y)
  (cond ((and (= y row) (= x col)) (begin  (display "|")(display (gotoM stat x y))))
        ((= x col) (begin (display "|")(display (gotoM stat x y)) (showgame_aux stat col row 1 (+ y 1))))
        ((= x 1) (begin (display "\n")(display (gotoM stat x y)) (showgame_aux stat col row (+ x 1) y)))
        (else (begin (display "|")(display (gotoM stat x y)) (showgame_aux stat col row (+ x 1) y)))))
;((showgame_aux '((1 2 3 4 5)(11 22 33 44 55)(111 222 333 444 555)(1111 2222 3333 4444 5555)) 5 3 1 0))

(define (put stat x ply)
  (cond ((zero? x) (append (cons ply '())(cdr stat)))
        (else (append (cons (car stat)'()) (put (cdr stat) (- x 1) ply)))))
(define (putM stat x y ply)
  (cond ((zero? y) (append (cons (put (car stat) x ply)'()) (cdr stat)) )
        (else (append (cons (car stat)'()) (putM (cdr stat) x (- y 1) ply)))))